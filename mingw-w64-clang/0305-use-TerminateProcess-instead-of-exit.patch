--- lld/MinGW/Driver.cpp.orig	2020-11-02 21:43:24.117381600 -0800
+++ lld/MinGW/Driver.cpp	2020-11-02 21:43:31.351722700 -0800
@@ -404,5 +404,5 @@
   std::vector<const char *> vec;
   for (const std::string &s : linkArgs)
     vec.push_back(s.c_str());
-  return coff::link(vec, true, stdoutOS, stderrOS);
+  return coff::link(vec, canExitEarly, stdoutOS, stderrOS);
 }
--- lld/tools/lld/lld.cpp.orig	2020-11-02 21:43:50.211104200 -0800
+++ lld/tools/lld/lld.cpp	2020-11-02 23:00:25.086102300 -0800
@@ -26,6 +26,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "lld/Common/Driver.h"
+#include "lld/Common/ErrorHandler.h"
 #include "lld/Common/Memory.h"
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/SmallVector.h"
@@ -54,7 +55,7 @@
 
 LLVM_ATTRIBUTE_NORETURN static void die(const Twine &s) {
   llvm::errs() << s << "\n";
-  exit(1);
+  exitLld(1);
 }
 
 static Flavor getFlavor(StringRef s) {
@@ -147,22 +148,32 @@
   InitLLVM x(argc, argv);
 
   std::vector<const char *> args(argv, argv + argc);
+  int ret = 1;
   switch (parseFlavor(args)) {
   case Gnu:
     if (isPETarget(args))
-      return !mingw::link(args, canExitEarly(), llvm::outs(), llvm::errs());
-    return !elf::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+      ret = !mingw::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    else
+      ret = !elf::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    break;
   case WinLink:
-    return !coff::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    ret = !coff::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    break;
   case Darwin:
-    return !mach_o::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    ret = !mach_o::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    break;
   case DarwinNew:
-    return !macho::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    ret = !macho::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    break;
   case Wasm:
-    return !wasm::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    ret = !lld::wasm::link(args, canExitEarly(), llvm::outs(), llvm::errs());
+    break;
   default:
     die("lld is a generic driver.\n"
         "Invoke ld.lld (Unix), ld64.lld (macOS), lld-link (Windows), wasm-ld"
         " (WebAssembly) instead");
   }
+
+  exitLld(ret);
+  return ret;
 }
--- lld/Common/ErrorHandler.cpp.orig	2020-11-02 22:36:38.711080500 -0800
+++ lld/Common/ErrorHandler.cpp	2020-11-02 22:36:45.429829700 -0800
@@ -22,6 +22,10 @@
 #include <unistd.h>
 #endif
 
+#ifdef _WIN32
+#include <processthreadsapi.h>
+#endif
+
 using namespace llvm;
 using namespace lld;
 
@@ -67,6 +71,9 @@
     lld::outs().flush();
     lld::errs().flush();
   }
+#ifdef _WIN32
+  TerminateProcess(GetCurrentProcess(), val);
+#endif
   _exit(val);
 }
 

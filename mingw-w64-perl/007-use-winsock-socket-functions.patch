--- a/cpan/Socket/Socket.xs
+++ b/cpan/Socket/Socket.xs
@@ -51,86 +51,6 @@
 # include <ws2tcpip.h>
 #endif
 
-#ifdef WIN32
-
-/* VC 6 with its original headers doesn't know about sockaddr_storage, VC 2003 does*/
-#ifndef _SS_MAXSIZE
-
-#  define _SS_MAXSIZE 128
-#  define _SS_ALIGNSIZE (sizeof(__int64))
-
-#  define _SS_PAD1SIZE (_SS_ALIGNSIZE - sizeof (short))
-#  define _SS_PAD2SIZE (_SS_MAXSIZE - (sizeof (short) + _SS_PAD1SIZE \
-                                                    + _SS_ALIGNSIZE))
-
-struct sockaddr_storage {
-    short ss_family;
-    char __ss_pad1[_SS_PAD1SIZE];
-    __int64 __ss_align;
-    char __ss_pad2[_SS_PAD2SIZE];
-};
-
-typedef int socklen_t;
-
-#define in6_addr in_addr6
-
-#define INET_ADDRSTRLEN  22
-#define INET6_ADDRSTRLEN 65
-
-#endif
-
-static int inet_pton(int af, const char *src, void *dst)
-{
-  struct sockaddr_storage ss;
-  int size = sizeof(ss);
-  ss.ss_family = af; /* per MSDN */
-
-  if (WSAStringToAddress((char*)src, af, NULL, (struct sockaddr *)&ss, &size) != 0)
-    return 0;
-
-  switch(af) {
-    case AF_INET:
-      *(struct in_addr *)dst = ((struct sockaddr_in *)&ss)->sin_addr;
-      return 1;
-    case AF_INET6:
-      *(struct in6_addr *)dst = ((struct sockaddr_in6 *)&ss)->sin6_addr;
-      return 1;
-    default:
-      WSASetLastError(WSAEAFNOSUPPORT);
-      return -1;
-  }
-}
-
-static const char *inet_ntop(int af, const void *src, char *dst, socklen_t size)
-{
-  struct sockaddr_storage ss;
-  unsigned long s = size;
-
-  ZeroMemory(&ss, sizeof(ss));
-  ss.ss_family = af;
-
-  switch(af) {
-    case AF_INET:
-      ((struct sockaddr_in *)&ss)->sin_addr = *(struct in_addr *)src;
-      break;
-    case AF_INET6:
-      ((struct sockaddr_in6 *)&ss)->sin6_addr = *(struct in6_addr *)src;
-      break;
-    default:
-      return NULL;
-  }
-
-  /* cannot directly use &size because of strict aliasing rules */
-  if (WSAAddressToString((struct sockaddr *)&ss, sizeof(ss), NULL, dst, &s) != 0)
-    return NULL;
-  else
-    return dst;
-}
-
-#define HAS_INETPTON
-#define HAS_INETNTOP
-#endif
-
 #ifdef NETWARE
 NETDB_DEFINE_CONTEXT
 NETINET_DEFINE_CONTEXT
--- a/dist/IO/poll.h
+++ b/dist/IO/poll.h
@@ -11,7 +11,11 @@
 #  define POLL_H
 
 #if (defined(HAS_POLL) && defined(I_POLL)) || defined(POLLWRBAND)
-#  include <poll.h>
+#  ifdef _WIN32
+#    include <winsock.h>
+#  else
+#    include <poll.h>
+#  endif
 #elif (defined(HAS_POLL) && defined(I_SYS_POLL))
 #  include <sys/poll.h>
 #else
--- a/win32/config_H.gc
+++ b/win32/config_H.gc
@@ -1953,7 +1953,7 @@
 #define	HAS_SOCKET		/**/
 /*#define	HAS_SOCKETPAIR	/ **/
 /*#define	HAS_SOCKADDR_SA_LEN	/ **/
-/*#define	HAS_SOCKADDR_IN6	/ **/
+#define	HAS_SOCKADDR_IN6	/ **/
 #define	HAS_SIN6_SCOPE_ID	/**/
 /*#define	HAS_IP_MREQ	/ **/
 /*#define	HAS_IP_MREQ_SOURCE	/ **/
@@ -2763,13 +2763,13 @@
  *	This symbol, if defined, indicates that the inet_ntop() function
  *	is available to parse IPv4 and IPv6 strings.
  */
-/*#define HAS_INETNTOP		/ **/
+#define HAS_INETNTOP		/ **/
 
 /* HAS_INETPTON:
  *	This symbol, if defined, indicates that the inet_pton() function
  *	is available to parse IPv4 and IPv6 strings.
  */
-/*#define HAS_INETPTON		/ **/
+#define HAS_INETPTON		/ **/
 
 /* HAS_INT64_T:
  *     This symbol will defined if the C compiler supports int64_t.
--- a/win32/config_H.vc
+++ b/win32/config_H.vc
@@ -1944,7 +1944,7 @@
 #define	HAS_SOCKET		/**/
 /*#define	HAS_SOCKETPAIR	/ **/
 /*#define	HAS_SOCKADDR_SA_LEN	/ **/
-/*#define	HAS_SOCKADDR_IN6	/ **/
+#define	HAS_SOCKADDR_IN6	/ **/
 #define	HAS_SIN6_SCOPE_ID	/**/
 /*#define	HAS_IP_MREQ	/ **/
 /*#define	HAS_IP_MREQ_SOURCE	/ **/
@@ -2754,13 +2754,13 @@
  *	This symbol, if defined, indicates that the inet_ntop() function
  *	is available to parse IPv4 and IPv6 strings.
  */
-/*#define HAS_INETNTOP		/ **/
+#define HAS_INETNTOP		/ **/
 
 /* HAS_INETPTON:
  *	This symbol, if defined, indicates that the inet_pton() function
  *	is available to parse IPv4 and IPv6 strings.
  */
-/*#define HAS_INETPTON		/ **/
+#define HAS_INETPTON		/ **/
 
 /* HAS_INT64_T:
  *     This symbol will defined if the C compiler supports int64_t.
--- a/win32/config.gc
+++ b/win32/config.gc
@@ -303,8 +303,8 @@
 d_inc_version_list='undef'
 d_index='undef'
 d_inetaton='undef'
-d_inetntop='undef'
-d_inetpton='undef'
+d_inetntop='define'
+d_inetpton='define'
 d_int64_t='undef'
 d_ip_mreq='undef'
 d_ip_mreq_source='undef'
@@ -523,7 +523,7 @@
 d_sin6_scope_id='define'
 d_sitearch='define'
 d_snprintf='define'
-d_sockaddr_in6='undef'
+d_sockaddr_in6='define'
 d_sockaddr_sa_len='undef'
 d_sockatmark='undef'
 d_sockatmarkproto='undef'
--- a/win32/config.vc
+++ b/win32/config.vc
@@ -303,8 +303,8 @@
 d_inc_version_list='undef'
 d_index='undef'
 d_inetaton='undef'
-d_inetntop='undef'
-d_inetpton='undef'
+d_inetntop='define'
+d_inetpton='define'
 d_int64_t='undef'
 d_ip_mreq='undef'
 d_ip_mreq_source='undef'
@@ -523,7 +523,7 @@
 d_sin6_scope_id='define'
 d_sitearch='define'
 d_snprintf='define'
-d_sockaddr_in6='undef'
+d_sockaddr_in6='define'
 d_sockaddr_sa_len='undef'
 d_sockatmark='undef'
 d_sockatmarkproto='undef'

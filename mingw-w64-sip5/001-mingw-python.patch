diff -Naur sip-5.3.0-orig/sipbuild/buildable.py sip-5.3.0/sipbuild/buildable.py
--- sip-5.3.0-orig/sipbuild/buildable.py	2020-05-31 14:51:51.000000000 +0300
+++ sip-5.3.0/sipbuild/buildable.py	2020-06-07 21:02:20.486145600 +0300
@@ -24,6 +24,7 @@
 import importlib
 import os
 import sys
+from distutils.sysconfig import get_config_var
 
 from .exceptions import UserException
 from .installable import Installable
@@ -142,7 +143,12 @@
         """ Return the filename extension that a module should have. """
 
         if sys.platform == 'win32':
-            return '.pyd'
+            plugin_ext = get_config_var('EXT_SUFFIX')
+            if not plugin_ext:
+                plugin_ext = get_config_var('SO')
+            if not plugin_ext:
+                plugin_ext = '.pyd'
+            return plugin_ext
 
         suffixes = importlib.machinery.EXTENSION_SUFFIXES
 
diff -Naur sip-5.3.0-orig/sipbuild/builder.py sip-5.3.0/sipbuild/builder.py
--- sip-5.3.0-orig/sipbuild/builder.py	2020-05-31 14:51:51.000000000 +0300
+++ sip-5.3.0/sipbuild/builder.py	2020-06-07 20:56:16.482702300 +0300
@@ -361,8 +361,11 @@
             return
 
         # Create an installable for the scripts.
+        scripts_dir = os.path.dirname(sys.executable)
+        if sys.platform == 'win32' and "MSYSTEM" in os.environ:
+            scripts_dir = os.popen(' '.join(['cygpath', '--unix', scripts_dir])).readline().strip()
         installable = Installable('scripts',
-                target_subdir=os.path.dirname(sys.executable))
+                target_subdir=scripts_dir)
 
         for ep in scripts:
             # Parse the entry point.
diff -Naur sip-5.3.0-orig/sipbuild/project.py sip-5.3.0/sipbuild/project.py
--- sip-5.3.0-orig/sipbuild/project.py	2020-05-31 14:51:51.000000000 +0300
+++ sip-5.3.0/sipbuild/project.py	2020-06-07 20:56:16.487690200 +0300
@@ -42,6 +42,12 @@
         PyProjectUndefinedOptionException)
 
 
+def get_default_target_dir():
+    tgt_dir = get_python_lib(plat_specific=1)
+    if sys.platform == 'win32' and "MSYSTEM" in os.environ:
+        tgt_dir = os.popen(' '.join(['cygpath', '--unix', tgt_dir])).readline().strip()
+    return tgt_dir
+
 class Project(AbstractProject, Configurable):
     """ Encapsulate a project containing one or more sets of bindings. """
 
@@ -128,7 +134,7 @@
                 help="disable the use of manylinux in the platform tag used "
                         "in the wheel name",
                 tools=['wheel']),
-        Option('target_dir', default=get_python_lib(plat_specific=1),
+        Option('target_dir', default=get_default_target_dir(),
                 help="the target installation directory", metavar="DIR",
                 tools=['build', 'install']),
         Option('api_dir', help="generate a QScintilla .api file in DIR",
